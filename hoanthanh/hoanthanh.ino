#include <ESP8266WiFi.h>      // Th∆∞ vi·ªán k·∫øt n·ªëi WiFi cho ESP8266
#include <PubSubClient.h>     // Th∆∞ vi·ªán d√πng ƒë·ªÉ giao ti·∫øp MQTT
#include <SPI.h>              // Th∆∞ vi·ªán h·ªó tr·ª£ giao ti·∫øp SPI (cho RFID)
#include <MFRC522.h>          // Th∆∞ vi·ªán ƒëi·ªÅu khi·ªÉn module RFID RC522

// ƒê·ªãnh nghƒ©a ch√¢n k·∫øt n·ªëi ph·∫ßn c·ª©ng
#define SS_PIN D4         // Ch√¢n SDA c·ªßa RFID n·ªëi v·ªõi D4 (GPIO2)
#define RST_PIN D3        // Ch√¢n RST c·ªßa RFID n·ªëi v·ªõi D3 (GPIO0)
#define BUZZER_PIN D8     // C√≤i k·∫øt n·ªëi v·ªõi ch√¢n D8 (GPIO15)
#define GAS_SENSOR A0     // C·∫£m bi·∫øn kh√≠ gas k·∫øt n·ªëi ch√¢n A0 (analog)

// Th√¥ng tin WiFi
const char* ssid = "Vuongphutho 2";         
const char* password = "12345679";       

// C·∫•u h√¨nh ƒë·ªãa ch·ªâ MQTT broker
const char* mqtt_server = "192.168.1.10"; 
WiFiClient espClient;
PubSubClient client(espClient);

// Kh·ªüi t·∫°o module RFID
MFRC522 rfid(SS_PIN, RST_PIN);

// UID h·ª£p l·ªá cho ph√©p v√†o h·ªá th·ªëng
byte validUID[] = {0xA3, 0x4B, 0x08, 0x05}; 

// ƒê·∫øm s·ªë l·∫ßn qu√©t th·∫ª sai
int failedAttempts = 0;
const int maxFailedAttempts = 3; // Sau 3 l·∫ßn sai th√¨ c·∫£nh b√°o

// Tr·∫°ng th√°i ƒëi·ªÅu khi·ªÉn c√≤i t·ª´ MQTT
bool mqttBuzzerState = false;

// H√†m so s√°nh 2 UID xem c√≥ gi·ªëng nhau kh√¥ng
bool isSameUID(byte *a, byte *b, byte len) {
  for (byte i = 0; i < len; i++) {
    if (a[i] != b[i]) return false;
  }
  return true;
}

// H√†m x·ª≠ l√Ω khi c√≥ tin nh·∫Øn MQTT nh·∫≠n v·ªÅ
void callback(char* topic, byte* payload, unsigned int length) {
  String message;
  for (unsigned int i = 0; i < length; i++) {
    message += (char)payload[i];
  }

  Serial.print("üì© Nh·∫≠n l·ªánh t·ª´ topic ");
  Serial.print(topic);
  Serial.print(": ");
  Serial.println(message);

  // Ki·ªÉm tra l·ªánh ƒëi·ªÅu khi·ªÉn c√≤i t·ª´ MQTT
  if (String(topic) == "esp8266/buzzer/control") {
    if (message == "ON") {
      mqttBuzzerState = true;
      digitalWrite(BUZZER_PIN, HIGH);  // B·∫≠t c√≤i
      Serial.println("üîä C√≤i ƒë∆∞·ª£c b·∫≠t t·ª´ MQTT");
    } else if (message == "OFF") {
      mqttBuzzerState = false;
      digitalWrite(BUZZER_PIN, LOW);   // T·∫Øt c√≤i
      Serial.println("üîá C√≤i ƒë∆∞·ª£c t·∫Øt t·ª´ MQTT");
    }
  }
}

// H√†m k·∫øt n·ªëi WiFi
void setup_wifi() {
  delay(10);
  Serial.println("üîå ƒêang k·∫øt n·ªëi WiFi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ ƒê√£ k·∫øt n·ªëi WiFi!");
  Serial.print("üì° IP c·ªßa ESP8266: ");
  Serial.println(WiFi.localIP());
}

// H√†m k·∫øt n·ªëi l·∫°i MQTT n·∫øu b·ªã m·∫•t k·∫øt n·ªëi
void reconnect() {
  while (!client.connected()) {
    Serial.print("üîÅ K·∫øt n·ªëi MQTT...");
    if (client.connect("ESP8266Client")) {
      Serial.println("‚úÖ Th√†nh c√¥ng!");
      client.subscribe("esp8266/buzzer/control"); // L·∫Øng nghe topic ƒëi·ªÅu khi·ªÉn c√≤i
    } else {
      Serial.print("‚ùå Th·∫•t b·∫°i, m√£ l·ªói: ");
      Serial.println(client.state());
      delay(3000);
    }
  }
}

// Thi·∫øt l·∫≠p ban ƒë·∫ßu
void setup() {
  Serial.begin(115200);       // M·ªü c·ªïng Serial ƒë·ªÉ debug
  SPI.begin();                // Kh·ªüi ƒë·ªông giao ti·∫øp SPI
  rfid.PCD_Init();            // Kh·ªüi ƒë·ªông RFID

  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(BUZZER_PIN, LOW); // T·∫Øt c√≤i ban ƒë·∫ßu

  setup_wifi();                  // K·∫øt n·ªëi WiFi
  client.setServer(mqtt_server, 1883);  // C√†i ƒë·ªãa ch·ªâ MQTT broker
  client.setCallback(callback);        // C√†i h√†m x·ª≠ l√Ω tin nh·∫Øn ƒë·∫øn

  Serial.println("üöÄ H·ªá th·ªëng kh·ªüi ƒë·ªông!");
}

// V√≤ng l·∫∑p ch√≠nh
void loop() {
  if (!client.connected()) {
    reconnect(); // K·∫øt n·ªëi l·∫°i n·∫øu m·∫•t MQTT
  }
  client.loop(); // Duy tr√¨ k·∫øt n·ªëi MQTT

  // N·∫øu MQTT ƒëang y√™u c·∫ßu t·∫Øt c√≤i
  if (!mqttBuzzerState) {
    digitalWrite(BUZZER_PIN, LOW);
  }

  // ƒê·ªçc gi√° tr·ªã t·ª´ c·∫£m bi·∫øn kh√≠ gas
  int gasValue = analogRead(GAS_SENSOR);
  Serial.print("üå´Ô∏è N·ªìng ƒë·ªô kh√≠ gas: ");
  Serial.println(gasValue);

  // G·ª≠i d·ªØ li·ªáu kh√≠ gas l√™n MQTT
  char gasStr[8];
  itoa(gasValue, gasStr, 10);
  client.publish("esp8266/sensors/gas", gasStr);

  // N·∫øu kh√¥ng b·ªã MQTT chi ph·ªëi, ƒëi·ªÅu khi·ªÉn c√≤i theo c·∫£m bi·∫øn kh√≠ gas
  if (!mqttBuzzerState) {
    if (gasValue > 160) {
      digitalWrite(BUZZER_PIN, HIGH); // C√≤i k√™u khi kh√≠ v∆∞·ª£t ng∆∞·ª°ng
    } else {
      digitalWrite(BUZZER_PIN, LOW);
    }
  }

  // Ki·ªÉm tra n·∫øu c√≥ th·∫ª RFID ƒë∆∞·ª£c qu√©t
  if (!rfid.PICC_IsNewCardPresent() || !rfid.PICC_ReadCardSerial()) {
    delay(500); // Kh√¥ng c√≥ th·∫ª th√¨ ngh·ªâ 0.5s
    return;
  }

  // L·∫•y UID t·ª´ th·∫ª
  byte readUID[4];
  for (byte i = 0; i < 4; i++) {
    readUID[i] = rfid.uid.uidByte[i];
  }

  // In UID v√† g·ª≠i l√™n MQTT
  char uidStr[20];
  sprintf(uidStr, "%02X%02X%02X%02X", readUID[0], readUID[1], readUID[2], readUID[3]);
  Serial.print("ü™™ UID qu√©t ƒë∆∞·ª£c: ");
  Serial.println(uidStr);
  client.publish("esp8266/rfid/uid", uidStr);

  // Ki·ªÉm tra UID ƒë√∫ng hay sai
  if (isSameUID(readUID, validUID, 4)) {
    Serial.println("‚úÖ Th·∫ª h·ª£p l·ªá");
    failedAttempts = 0;
    beepSuccess();
  } else {
    Serial.println("‚ùå Th·∫ª kh√¥ng h·ª£p l·ªá");
    failedAttempts++;
    beepError();
    if (failedAttempts >= maxFailedAttempts) {
      beepAlert();
    }
  }

  rfid.PICC_HaltA(); // K·∫øt th√∫c phi√™n l√†m vi·ªác v·ªõi th·∫ª
  delay(500);        // Ngh·ªâ tr√°nh qu√©t l·∫∑p
}

// Ph·∫£n h·ªìi c√≤i n·∫øu th·∫ª ƒë√∫ng
void beepSuccess() {
  if (!mqttBuzzerState) {
    tone(BUZZER_PIN, 1500, 200); // Beep t·∫ßn s·ªë 1500Hz trong 200ms
    delay(200);
  }
}

// Ph·∫£n h·ªìi c√≤i n·∫øu th·∫ª sai
void beepError() {
  if (!mqttBuzzerState) {
    for (int i = 0; i < 2; i++) {
      tone(BUZZER_PIN, 1000, 200); // Beep t·∫ßn s·ªë 1000Hz
      delay(300);
    }
  }
}

// C·∫£nh b√°o khi sai qu√° s·ªë l·∫ßn cho ph√©p
void beepAlert() {
  if (!mqttBuzzerState) {
    for (int i = 0; i < 5; i++) {
      tone(BUZZER_PIN, 800, 400); // C√≤i c·∫£nh b√°o
      delay(500);
    }
  }
}
